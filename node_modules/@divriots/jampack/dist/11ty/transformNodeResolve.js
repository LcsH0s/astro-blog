"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformNodeResolve = void 0;
const rollup_plugin_html_1 = __importDefault(require("@open-wc/rollup-plugin-html"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const rollup = __importStar(require("rollup"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const tools_1 = require("../tools");
async function transformNodeResolve(content, outputPath) {
    if (!outputPath.endsWith(".html"))
        return content;
    if (!tools_1.hasScriptModules(content))
        return content;
    const filename = path_1.default.basename(outputPath);
    const outputDir = path_1.default.dirname(outputPath);
    const inputOptions = {
        plugins: [
            rollup_plugin_html_1.default({
                rootDir: outputDir,
                name: filename,
                html: content,
                minify: false,
            }),
            plugin_node_resolve_1.default({
                customResolveOptions: {
                    basedir: process.cwd(),
                },
            }),
        ],
    };
    const outputOptions = {
        format: "esm",
        dir: outputDir,
    };
    const bundle = await rollup.rollup(inputOptions);
    // Generate
    const { output } = await bundle.generate(outputOptions);
    const indexhtml = output.find((asset) => asset.fileName === filename).source;
    // Write the rest of the modules
    output
        .filter((asset) => asset.type === "chunk")
        .forEach((asset) => {
        if (asset.code !== undefined) {
            fs_1.default.mkdirSync(outputDir, { recursive: true });
            fs_1.default.writeFileSync(path_1.default.join(outputDir, asset.fileName), asset.code);
        }
    });
    return indexhtml;
}
exports.transformNodeResolve = transformNodeResolve;
