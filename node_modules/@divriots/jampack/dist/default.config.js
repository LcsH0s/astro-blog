"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const defaultConfig = {
    // Source folder
    rootDir: "./dist",
    // Where to start resolving node_modules from
    modulesDir: "./",
    // jampack serve listening port
    servePort: 8080,
    // Processors
    proc_html_minifier: {
        collapseWhitespace: true,
        minifyCSS: true,
        removeComments: true,
        removeRedundantAttributes: true,
        minifyJS: true,
        sortAttributes: true,
        sortClassName: true,
    },
    proc_html_link_noreferrer: true,
};
const configFileName = path_1.default.join(process.cwd(), "./.jampack.config.js");
async function loadConfig() {
    let config = defaultConfig;
    if (fs_1.default.existsSync(configFileName)) {
        const localConfig = await Promise.resolve().then(() => __importStar(require(configFileName)));
        config = Object.assign(defaultConfig, localConfig);
    }
    else {
        console.log("No config file - Using default config\n");
    }
    console.log("Using config:");
    console.log(config);
    console.log("");
    return config;
}
exports.loadConfig = loadConfig;
