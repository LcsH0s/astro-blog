"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pack = void 0;
const rollup = __importStar(require("rollup"));
const rollup_plugin_terser_1 = require("rollup-plugin-terser");
const rollup_plugin_html_1 = __importDefault(require("@open-wc/rollup-plugin-html"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const tools_1 = require("./tools");
const posthtml_1 = __importDefault(require("posthtml"));
const posthtml_minifier_1 = __importDefault(require("posthtml-minifier"));
const posthtml_link_noreferrer_1 = __importDefault(require("posthtml-link-noreferrer"));
const posthtml_collect_styles_1 = __importDefault(require("posthtml-collect-styles"));
const fs_1 = __importDefault(require("fs"));
async function processJSModules(rootDir, files, isProduction, config) {
    const htmlfiles = Object.entries(files)
        .filter(([, content]) => tools_1.hasScriptModules(content))
        .map(([name, content]) => {
        return {
            name: name,
            html: content,
        };
    });
    const htmlplugin = rollup_plugin_html_1.default({
        rootDir,
        html: htmlfiles,
        minify: false,
    });
    if (htmlfiles.length < 1) {
        // Nothing to do here
        return;
    }
    const plugins = [htmlplugin];
    plugins.push(plugin_node_resolve_1.default({
        customResolveOptions: {
            basedir: config.modulesDir,
        },
    }));
    if (isProduction)
        plugins.push(rollup_plugin_terser_1.terser());
    const inputOptions = {
        plugins,
    };
    const outputOptions = {
        format: "esm",
        dir: rootDir,
    };
    const bundle = await rollup.rollup(inputOptions);
    const { output } = await bundle.generate(outputOptions);
    // Write the rest of the modules
    output.forEach((asset) => {
        files[asset.fileName] = asset.code || asset.source;
    });
}
async function processHTML(rootDir, files, isProduction, config) {
    const htmlTransform = async (html) => {
        let ph = posthtml_1.default();
        if (config.proc_html_link_noreferrer === true) {
            ph = ph.use(posthtml_link_noreferrer_1.default());
        }
        if (true) {
            ph = ph.use(posthtml_collect_styles_1.default());
        }
        if (config.proc_html_minifier !== false) {
            ph = ph.use(posthtml_minifier_1.default(config.proc_html_minifier));
        }
        return ph.process(html).then(function (result) {
            return result.html;
        });
    };
    const tasks = Object.entries(files).map(async ([name, data]) => {
        if (name.endsWith(".html"))
            files[name] = await htmlTransform(data);
    });
    return Promise.all(tasks);
}
async function pack(rootDir, entries, isProduction, config) {
    if (entries.length < 1) {
        throw new Error("No entry files to process");
    }
    // Load entries
    const originalFiles = {};
    entries.forEach((e) => {
        const name = e;
        const content = fs_1.default.readFileSync(path_1.default.join(rootDir, name)).toString();
        originalFiles[name] = content;
    });
    const processedFiles = Object.assign({}, originalFiles);
    console.log(chalk_1.default.green("Packing..."));
    const start_pack = Date.now();
    await processJSModules(rootDir, processedFiles, isProduction, config);
    if (isProduction) {
        await processHTML(rootDir, processedFiles, isProduction, config);
    }
    // Packing done
    const end_pack = Date.now();
    console.log(chalk_1.default.green("Packed in " + (end_pack - start_pack) + "ms"));
    // Writing files
    Object.entries(processedFiles).forEach(([name, content]) => {
        if (!originalFiles[name] || originalFiles[name] !== content) {
            console.log("Writing: " + name);
            fs_1.default.writeFile(path_1.default.join(rootDir, name), content, (err) => {
                if (err)
                    throw err;
            });
        }
    });
}
exports.pack = pack;
